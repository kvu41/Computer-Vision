# -*- coding: utf-8 -*-
"""DenseNet121.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18o0-G3JKFFMH3g2mD5TB3pts_iuCeT_Q
"""

from keras.applications.densenet import DenseNet121
from keras.layers import Dense, GlobalAveragePooling2D
from keras.models import Model
from keras import backend as K

##create based pretrained model
base_model = DenseNet121(weights='/content/drive/My Drive/Deep Learning Data/Chest-XRay/Models/densenet.hdf5', include_top = False)

base_model.summary()

# get the convolutional layers
conv2D_layers = [layer for layer in base_model.layers 
                if str(type(layer)).find('Conv2D') > -1]
print("A couple conv2D layers")
conv2D_layers[0:5]

print(f"There are {len(conv2D_layers)} convolutional layers")

print("The input has 3 channels")
base_model.input

print("The output has 1024 channels")
x = base_model.output
x

# add a global spatial average pooling layer
x_pool = GlobalAveragePooling2D()(x)
x_pool

# Define a set of five class labels to use as an example
labels = ['Emphysema', 
          'Hernia', 
          'Mass', 
          'Pneumonia',  
          'Edema']
n_classes = len(labels)
print(f"In this example, we want our model to identify {n_classes} classes")

# Add a logistic layer the same size as the number of classes you're trying to predict
predictions = Dense(n_classes, activation="sigmoid")(x_pool)
print("Predictions have {n_classes} units, one for each class")
predictions

model = Model(inputs=base_model.input, outputs=predictions)

model.compile(optimizer='adam',
              loss='categorical_crossentropy')
# we'll customize the loss function in the assignment!

model.summary()

